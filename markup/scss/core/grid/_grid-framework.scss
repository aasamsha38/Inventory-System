// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
// @mixin make-grid-columns($i: 1, $list: ".xs-#{$i}, .sm-#{$i}, .md-#{$i}, .lg-#{$i}") {
// 	@for $i from (1 + 1) through $grid-columns {
// 		$list: "#{$list}, .xs-#{$i}, .sm-#{$i}, .md-#{$i}, .lg-#{$i}";
// 	}
// 	#{$list} {
// 		// position: relative;
// 		min-height: 1px;
// 		// Prevent columns from collapsing when empty
// 		// Inner gutter via padding
// 		padding-left:  ceil(($grid-gutter-xs / 2));
// 		padding-right: floor(($grid-gutter-xs / 2));
// 		@include media('>=tablet') {
// 			padding-left:  ceil(($grid-gutter-sm / 2));
// 			padding-right: floor(($grid-gutter-sm / 2));
// 		}
// 		@include media('>=desktop') {
// 			padding-left:  ceil(($grid-gutter-md / 2));
// 			padding-right: floor(($grid-gutter-md / 2));
// 		}
// 		@include media('>=widescreen') {
// 			padding-left:  ceil(($grid-gutter-lg / 2));
// 			padding-right: floor(($grid-gutter-lg / 2));
// 		}
// 	}
// }


// [converter] This is defined recursively in LESS, but Sass supports real loops
// @mixin float-grid-columns($class, $i: 1, $list: "#{$class}-#{$i}") {
// 	@for $i from (1 + 1) through $grid-columns {
// 		$list: "#{$list}, #{$class}-#{$i}";
// 	}
// 	#{$list} {
// 		float: left;
// 	}
// }


@mixin calc-grid-column($index, $class, $type) {
	@if ($type == width) and ($index > 0) {
		.#{$class}-#{$index} {
			width: percentage(($index / $grid-columns));
		}
	}
	@if ($type == push) and ($index > 0) {
		.#{$class}-push-#{$index} {
			left: percentage(($index / $grid-columns));
		}
	}
	@if ($type == push) and ($index == 0) {
		.#{$class}-push-0 {
			left: auto;
		}
	}
	@if ($type == pull) and ($index > 0) {
		.#{$class}-pull-#{$index} {
			right: percentage(($index / $grid-columns));
		}
	}
	@if ($type == pull) and ($index == 0) {
		.#{$class}-pull-0 {
			right: auto;
		}
	}
	@if ($type == offset) {
		.#{$class}-offset-#{$index} {
			margin-left: percentage(($index / $grid-columns));
		}
	}
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
	@for $i from 0 through $columns {
		@include calc-grid-column($i, $class, $type);
	}
}


// Create grid for specific class
@mixin make-grid($class) {
	// @include float-grid-columns($class);
	@include loop-grid-columns($grid-columns, $class, width);
	@include loop-grid-columns($grid-columns, $class, pull);
	@include loop-grid-columns($grid-columns, $class, push);
	@include loop-grid-columns($grid-columns, $class, offset);
}





// Grid system mixin
//
// Generate semantic grid columns with these mixins.

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-xs) {
	margin-left:  ceil(($gutter / -2));
	margin-right: floor(($gutter / -2));
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
	flex-basis: percentage(($columns / $grid-columns));
	max-width: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-offset($columns) {
	margin-left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-push($columns) {
	left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-pull($columns) {
	right: percentage(($columns / $grid-columns));
}

@mixin make-sx-column($columns, $gutter: $grid-gutter-width) {
	@media (min-width: $container-sx) {
		flex-basis: percentage(($columns / $grid-columns));
		max-width: percentage(($columns / $grid-columns));
	}
}
@mixin make-sx-column-offset($columns) {
	@media (min-width: $container-sx) {
		margin-left: percentage(($columns / $grid-columns));
	}
}
@mixin make-sx-column-push($columns) {
	@media (min-width: $container-sx) {
		left: percentage(($columns / $grid-columns));
	}
}
@mixin make-sx-column-pull($columns) {
	@media (min-width: $container-sx) {
		right: percentage(($columns / $grid-columns));
	}
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
	@media (min-width: $container-sm) {
		flex-basis: percentage(($columns / $grid-columns));
		max-width: percentage(($columns / $grid-columns));
	}
}
@mixin make-sm-column-offset($columns) {
	@media (min-width: $container-sm) {
		margin-left: percentage(($columns / $grid-columns));
	}
}
@mixin make-sm-column-push($columns) {
	@media (min-width: $container-sm) {
		left: percentage(($columns / $grid-columns));
	}
}
@mixin make-sm-column-pull($columns) {
	@media (min-width: $container-sm) {
		right: percentage(($columns / $grid-columns));
	}
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
	@media (min-width: $container-md) {
		flex-basis: percentage(($columns / $grid-columns));
		max-width: percentage(($columns / $grid-columns));
	}
}
@mixin make-md-column-offset($columns) {
	@media (min-width: $container-md) {
		margin-left: percentage(($columns / $grid-columns));
	}
}
@mixin make-md-column-push($columns) {
	@media (min-width: $container-md) {
		left: percentage(($columns / $grid-columns));
	}
}
@mixin make-md-column-pull($columns) {
	@media (min-width: $container-md) {
		right: percentage(($columns / $grid-columns));
	}
}

// Generate the standard columns
@mixin make-sd-column($columns, $gutter: $grid-gutter-width) {
	@media (min-width: $container-sd) {
		flex-basis: percentage(($columns / $grid-columns));
		max-width: percentage(($columns / $grid-columns));
	}
}
@mixin make-sd-column-offset($columns) {
	@media (min-width: $container-sd) {
		margin-left: percentage(($columns / $grid-columns));
	}
}
@mixin make-sd-column-push($columns) {
	@media (min-width: $container-sd) {
		left: percentage(($columns / $grid-columns));
	}
}
@mixin make-sd-column-pull($columns) {
	@media (min-width: $container-sd) {
		right: percentage(($columns / $grid-columns));
	}
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
	@media (min-width: $container-lg) {
		flex-basis: percentage(($columns / $grid-columns));
		max-width: percentage(($columns / $grid-columns));
	}
}
@mixin make-lg-column-offset($columns) {
	@media (min-width: $container-lg) {
		margin-left: percentage(($columns / $grid-columns));
	}
}
@mixin make-lg-column-push($columns) {
	@media (min-width: $container-lg) {
		left: percentage(($columns / $grid-columns));
	}
}
@mixin make-lg-column-pull($columns) {
	@media (min-width: $container-lg) {
		right: percentage(($columns / $grid-columns));
	}
}